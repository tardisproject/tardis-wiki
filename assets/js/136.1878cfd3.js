(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{507:function(e,t,n){"use strict";n.r(t);var o=n(46),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"tutorial-8-monitoring-and-manipulating-your-processes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-8-monitoring-and-manipulating-your-processes"}},[e._v("#")]),e._v(" Tutorial 8: Monitoring and manipulating your processes")]),e._v(" "),n("h2",{attrs:{id:"the-foreground-and-the-background"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-foreground-and-the-background"}},[e._v("#")]),e._v(" The foreground and the background")]),e._v(" "),n("p",[e._v("You don't need to use screen to multitask in linux - bash provides some\nmethods of elementary process control that you ought to know about. By\ndefault a process (any program you run) will run in foreground - meaning\nyour user input will be piped to it rather than the shell or any other\nprogram. It is possible to make a program run in background instead,\nsimply by appending "),n("strong",[e._v("&")]),e._v(" to the commandline - for instance, try\nrunning: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("top &\n")])])]),n("p",[n("strong",[e._v('Instead of the familiar full-screen display, you will get a pair of\nnumbers - the one in square brackets (probably "1") is the number of the\nbackgrounded process belonging to you (this is the "job number" - don\'t\nconfuse this with PID), and the second number is the Process ID (PID)\nwhich is used to globally refer to the process - to kill it, change its\npriority, etc - once it is running. While the PID is accessable to\nanyone on the machine, the other number is only for your own use in the\nfollowing two commands -'),n("strong",[e._v("fg")]),e._v("and")]),e._v("bg**. You can use fg or bg on their\nown to bring a specified process to the foreground or the background. If\na process is not in the foreground it is either already in the\nbackground or it's stopped - you can usually stop a foreground process\nby pressing**^z**(ctrl-z). This will freeze it, and return you to the\nprompt - then you can either type"),n("strong",[e._v("bg")]),e._v("to allow it to run in the\nbackground, without your input, or"),n("strong",[e._v("fg")]),e._v("to bring it back to the\nforeground. Now try bringing top back to foreground by typing:**")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("fg\n")])])]),n("p",[n("strong",[e._v("Optionally, you could type")]),e._v("fg 1**or whatever the first number was to\nbring back a specific process, if you have more than one running in the\nbackground or stopped. By default,"),n("strong",[e._v("fg")]),e._v("on its own will bring back the\nlast process that left the foreground. Instead of the number, you can\nalso use the name or the first few letters of the name of the process.\nThe other command,**bg''', works exactly the same way (except of course\nyou can't put a program that's running in the foreground into the\nbackground with it, simply because you don't have the shell to type it\ninto - you have to stop it first with ^z).")]),e._v(" "),n("h2",{attrs:{id:"listing-killing-and-renicing-processes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#listing-killing-and-renicing-processes"}},[e._v("#")]),e._v(" Listing, killing and renicing processes")]),e._v(" "),n("p",[e._v("You will not be the only one running processes on the tardis machine you\nare logged in to - as well as the processes the machine runs itself,\nsuch as network services and daemons, you will be sharing memory and\nprocessor time with other regular users, who may only be running\n"),n("strong",[e._v("mutt")]),e._v(" to check their mail, or may be compiling large amounts of\nsource code. The responsiveness of the system is therefore connected to\nthe current demand for it. To cope with many users running many\nprocesses, linux has a threads and priorities system which we can\ncontrol to a small degree as a normal user.")]),e._v(" "),n("p",[e._v("To see who is connected to the same machine you are, type "),n("strong",[e._v("w")]),e._v(" - this\nlists all usernames, where they are connected from if they are logged in\nfrom the internet or another tardis machine, when they logged in, how\nlong they've been idle, how much cpu time they are using on average, and\nwhat they are currently running in foreground.")]),e._v(" "),n("p",[e._v("To list the processes you have running you can simply type ps. You will\nlikely only see two - bash, and "),n("strong",[e._v("ps")]),e._v(" itself. The command "),n("strong",[e._v("ps")]),e._v(" is\nmuch more powerful however, and has many commandline options to modify\nthe output. My preferred ps commandline is: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ps auxf\n")])])]),n("p",[n("strong",[e._v("This lists")]),e._v("a"),n("strong",[e._v("ll processes, with")]),e._v("u"),n("strong",[e._v("sers listed with their\nprocesses, regardless of tty ("),n("strong",[e._v("x")]),e._v("), and with an ascii-art")]),e._v("f"),n("strong",[e._v("orest\nstyle process hierarchy display (which shows graphically which processes\nare children to which). The output is rather long - it shows both\nuserland and system processes. Scroll back up it by pressing\nshift-pageup, or alternatively pipe the output to the pager")]),e._v("less**ðŸ˜—*")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ps auxf | less\n")])])]),n("p",[e._v("''' You may spot some interesting stuff going on - the process list is\nconstantly changing, so no two ps outputs will be the same. The most\nuseful thing to be found on the process list is the PID - the four or\nfive digit number on the left. It is this number you use to reference\nindividual processes.")]),e._v(" "),n("p",[e._v("The other useful thing to understand is priority of a process. A process\ncan be assigned a priority, which tells the kernel how much cpu time it\nshould be given relative to other processes. For a non-root user,\npriorities range from 0 to 19 where 0 is the most cpu time (demands the\nprocess' maximum fair share of cpu time available) and 19 is the least\n(the lowest priority) - meaning it will use only idle cpu time that no\nother process wants. It is also possible to have negative priorities,\nwhere processes aggressively grab cpu time whether they need it or not,\nbut only the root user can create those. Also only the root user can\nincrease the priority of a process (reduce the number), although the\nuser can create his processes with any priority between 0 and 19, and\nreduce the priority (increase the number) while it is running. Note\nhowever that the priority the user assigns their process is only taken\nas a guide by the kernel, and the kernel will assign a lower real\npriority based on system load etc. The priority you assign a process is\ncalled its "),n("strong",[e._v("nice")]),e._v("d priority, and you can see both the real and niced\npriority in "),n("strong",[e._v("top")]),e._v(' - have a look now. It seems that nobody knows\nexactly why it\'s called "nice", but people seem to think it\'s to do with\nmaking the process "behave nicely". by not hogging unnecessary\nresources. You can make your own processes nicer with the renice command')]),e._v(" "),n("ul",[n("li",[e._v("have a read of "),n("strong",[e._v("man renice")]),e._v(" now, because it's fairly versatile.")])]),e._v(" "),n("p",[e._v("Now let's try some advanced process manipulation. We are going to create\na resource hogging process, but then stop it, make it play nice, and\neventually kill it altogether before it can complete. First let's log in\na second time, so we can watch how our process behaves. Log in as\ndescribed in the first tutorial, and run "),n("strong",[e._v("top")]),e._v(" in the new window. Now\ngo back to your other shell window - it's time to create a resource\nhogging process that will never end: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("grep sillystringthatwontbefound /dev/urandom\n")])])]),n("p",[n("strong",[e._v('This will search the system random "device" for an exact match of a\nsilly string that is rather unlikely to be found. This process will\nnever end, and will use as much cpu time as the kernel is willing to\ngive it. Run this now, and watch it appear at the top of the list in\nyour other shell window running')]),e._v("top'''. You will see in the CPU column\nthat it's using considerably more cpu time than any other process\n(unless you're unlucky and the machine is heavily loaded at the moment),\nand you will see the kernel changing its priority constantly to balance\nits demands with those of the rest of the system, while the \"nice\"\ncolumn remains at zero.")]),e._v(" "),n("p",[e._v("Now we will make our resource hog play a little nicer. Let's stop our\nprocess by pressing ^z (ctrl-z). Note how it's no longer taking up any\ncpu time, if you look at top. Now let's put it in the background by\ntyping bg and see it spring back up on the top list. Now we have a shell\nprompt we can take control of the process, so let's tame it a bit. We'll\nneed the PID of the process, so copy it from the list in top - you can\ncopy by just selecting the text, and paste it when you need to by\nright-clicking in the window. Now we know the PID, we can change its\npriority: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("renice +10 [PID of our process]\n")])])]),n("p",[n("strong",[e._v("Now have a look at the listing in")]),e._v("top"),n("strong",[e._v("again - our nice priority has\nbeen increased, but if the system is as busy when you try it as when i\nwas writing this, you'll find the actual priority doesn't change at all\nbecause it's a higher number to start with than your nice priority. Your\nnice priority is just saying to the kernel that your process doesn't\nneed to go over a certain priority. So let's force our resource hog to\nabsolute minimum priority:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("renice +19 [PID of our process]\n")])])]),n("p",[e._v("''' Now we see the process' priority has dropped to 19 and if any\nprocess at all wants more cpu time our grep will step out of the way.")]),e._v(" "),n("p",[e._v("Now to finish off, let's kill the process. We could just bring it back\nto foreground and interrupt it by pressing ^c, but killing it is pretty\nmuch the same. This is what you want to do if a process stops\nresponding, or behaves in a way you don't want it to and you can't stop\nit in a more friendly way. Try it now - simply type: kill [PID of\nprocess] It should now have disappeared from the processes list.\nSometimes uncooperative processes don't die with just the standard TERM\nsignal, in which case you want to send it a KILL signal by typing: kill\n-s 9 [PID of process] It's worth reading "),n("strong",[e._v("man kill")]),e._v(" as it explains\ndifferent signals - you will see that "),n("strong",[e._v("kill")]),e._v(" can be used to send other\nsignals to processes, such as HUP which is used fairly often. Now you\nknow how to control processes you run, you should be able to do pretty\nmuch everything you need on tardis. The next few tutorials will teach\nyou to use ssh and wget to copy files across to your tardis account to\ndo things like upload your website to tardis, and download software\nsource files to compile in our last tutorial. By the time you complete\nthese tutorials, you should know how to do pretty much anything you\nmight want on tardis.")]),e._v(" "),n("p",[n("strong",[e._v("Next: "),n("a",{attrs:{href:"Tardis_Beginner_Tutorials/9",title:"wikilink"}},[e._v("Advanced SSH Usage")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);