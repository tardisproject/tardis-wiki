(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{500:function(e,t,n){"use strict";n.r(t);var o=n(46),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"tutorial-2-basic-navigation-of-the-command-line-environment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-2-basic-navigation-of-the-command-line-environment"}},[e._v("#")]),e._v(" Tutorial 2: Basic navigation of the command line environment")]),e._v(" "),n("p",[e._v('When you log in via SSH, you are presented with the command line\ninterface, by means of the shell. The current default is Bash. Bash\nstands for "Bourne Again SHell", and is one (but the most commonly used\nby far) of many shells available for Linux. A shell is is what\ninterprets what you type into the prompt and makes things happen -\ndifferent shells do things differently. Your default shell is bash,\nalthough you can change it if you wish, but this document will only give\nyou a brief introduction to using the shell to run programs and use the\nfilesystem.')]),e._v(" "),n("h3",{attrs:{id:"prevent-your-home-directory-from-being-globally-accessible"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prevent-your-home-directory-from-being-globally-accessible"}},[e._v("#")]),e._v(" Prevent your home directory from being globally accessible")]),e._v(" "),n("p",[e._v("Since Linux is a Unix-like system, it inherits many features from Unix's\ndesign. On multi-user systems, this includes having everyone's home\ndirectories (where you store your own files and program configurations)\nglobally readable by any user. This may not be desirable to you,\nespecially if you use your shell account for idling on IRC all day, and\nhave a few private messages you might not want everyone to be able to\nsee (however, note, do not have an expectation of privacy on insecure,\nmulti-user systems).")]),e._v(" "),n("p",[e._v("In the shell, type "),n("strong",[e._v("chmod -R o-rwx ~")])]),e._v(" "),n("p",[e._v("The tilde '~' is shorthand for your home directory, /home/USERNAME/. In\nour default, Bash (and most other shells), this is also referenced by\nthe variable $HOME (variables are accessible in shell scripts and the\nshell more generally by appending $ to the start of them).")]),e._v(" "),n("h3",{attrs:{id:"running-programs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#running-programs"}},[e._v("#")]),e._v(" Running programs")]),e._v(" "),n("p",[e._v("To run a program, you need to know the name of that program. All you\nneed to do is type that name, or if it is a specific script or program\nin a non-standard place, you will need to type the path of it as well\n(more on this later). A lot of the non-interactive Linux programs take\ncommand-line options which are additional words or filenames you type\nafter the name of the program. For example, the Linux program "),n("strong",[e._v("cat")]),e._v("\n(short for \"concatenate\") can display the contents of text files. Try\ntyping: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cat /etc/motd\n")])])]),n("p",[n("strong",[e._v('This simply dumps the content of the file "motd" in the directory\n"/etc" to screen. Command-line options also often have one-letter flags\nwhich tell the program what mode to run in, or how to display the\noutput. For instance,'),n("strong",[e._v("ls")]),e._v('lists the content of a directory, much like\n"dir" in a windows command prompt. Try typing')]),e._v("ls /"),n("strong",[e._v("Now try typing")]),e._v("ls\n/ -l"),n("strong",[e._v('This simply lists the files and directories in the root of the\nfilesystem (referred to simply as "/"), but the second one gives the\n"long" output. You can usually get a quick listing of the command-line\nflags available for a program by typing')]),e._v("[program name] --help"),n("strong",[e._v("It is\nworth mentioning that the Linux command-line is case sensitive, unlike\nwindows - this means that")]),e._v("cat"),n("strong",[e._v("is different from")]),e._v("CAT"),n("strong",[e._v("and from")]),e._v("Cat'''\netc. - only one will work, because there is no program called \"CAT\", but\nif there were you could call it by using the upper case. This applies to\nall filenames and command-line options etc.")]),e._v(" "),n("h3",{attrs:{id:"learning-how-to-use-programs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#learning-how-to-use-programs"}},[e._v("#")]),e._v(" Learning how to use programs")]),e._v(" "),n("p",[e._v("The best way to learn how a program works and how to use it is by\nreading the man page (manual page) built into the system about that\nprogram. To find out what a program does and how to use it, simply type\nman [program name]. Try it now - type: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("man cat\n")])])]),n("p",[e._v("''' You can scroll up and down using up and down arrows, page up and\npage down, and space and return. Don't worry if you don't understand\neverything written there, you're not expected to memorize all of a\nprogram's options - that's why they're so easily accessible in man\npages! Press q to quit the man page reader.")]),e._v(" "),n("p",[e._v("I should also mention the other manual command, info which (most of the\ntime) shows the same info as man, but uses Emacs to display it. However,\ncertain programs (such as tar) have much more useful information in the\ninfo page than the man page, because certain GNU programmers are very\nawkward about these things. You don't really need to worry about this\nthough.")]),e._v(" "),n("h3",{attrs:{id:"finding-a-program-for-your-purpose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#finding-a-program-for-your-purpose"}},[e._v("#")]),e._v(" Finding a program for your purpose")]),e._v(" "),n("p",[e._v("If you know what sort of program you want to run, but aren't sure of the\nname (or if such a program exists), you can use "),n("strong",[e._v("apropos")]),e._v(" to search\nfor a program by function. For instance, say we want to find an IRC\nclient but we don't know the names of any. We type: '''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("apropos irc\n")])])]),n("p",[n("strong",[e._v('But we get quite a lot of matches, most of which are no use to us.\nThis is because the search has turned up a load of results where "irc"\nwas part of another word, such as "circular". If we have a quick look at\nman apropos we find out that the -e flag searches for exact matches:')])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("apropos -e irc\n")])])]),n("p",[n("strong",[e._v("Yay, we've narrowed our matches down to what we wanted! Alternatively\nwe could have tried")]),e._v('apropos "irc client"'),n("strong",[e._v("which would have yielded the\nsame results. However, typing")]),e._v('apropos irc client\'\'\' without the quotes\nwould have returned twice the unwanted results, as it would have\nsearched for both "irc" and "client" and given you results for either.\nThe quotes tell Bash to treat what you put in them as one continuous\nstring.')]),e._v(" "),n("h3",{attrs:{id:"navigating-the-filesystem"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#navigating-the-filesystem"}},[e._v("#")]),e._v(" Navigating the filesystem")]),e._v(" "),n("p",[e._v("Just like in windows, you can use "),n("strong",[e._v("cd")]),e._v(" to change directory. Why don't\nwe use it in combination with ls to have a browse around the filesystem\nright now! To change to a directory, simply type "),n("strong",[e._v("cd")]),e._v(" and that\ndirectory's name. You'll notice the directory you're in is shown on your\nprompt, and can also be shown by typing "),n("strong",[e._v("pwd")]),e._v(". Now let's take a spin\naround the filesystem and see what we can see! Type ls between each step\nto get a feel for where you are. To go up a step in the directory tree\ntype cd .. Notice you are now in the /home/ directory with all the\nusers' home directories. To return to your specific home directory, type\n"),n("strong",[e._v("cd [your username]")]),e._v(" To go to the root of the filesystem type "),n("strong",[e._v("cd\n/")]),e._v(" You can also use tab completion - this is where you press tab\npartway through typing the name of the directory (or filename) and the\nshell completes it for you (if there is only one possible match).\nOtherwise you will hear a beep. If you press tab a second time, it will\nlist all the possible completions for what you've typed already. Type\n"),n("strong",[e._v("cd ~")]),e._v(" to return to your home directory. You can navigate faster by\nusing absolute paths. The current directory can be printed to the shell\nby typing "),n("strong",[e._v("pwd")]),e._v(" - this is useful to remember for scripts that you\nwrite for the shell. If you wanted to look at the source of my web page,\nyou could type:")]),e._v(" "),n("p",[e._v("'''")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("cd ..\ncd ..\ncd var\ncd autofs\ncd www\ncd users\ncd rain\ncd pages\n")])])]),n("p",[n("strong",[e._v("But it is infinitely more efficient to type")]),e._v("cd\n/var/autofs/www/users/rain/pages/"),n("strong",[e._v('all in one go. You could also type\nthat without the first "/" but only if you were in the root directory -\nthe first "/" means "from root". The last "/" is optional - Bash is\nintelligent enough to know something is a directory even if you don\'t\nuse it, but tab completion puts it in. From here we can now go back to\nour homepage using absolute paths - type')]),e._v("cd /home/[your username]'''")]),e._v(" "),n("p",[e._v("All this takes a little getting used to, and it's useful to have a\ncommand reference nearby - I recommend printing this handy "),n("a",{attrs:{href:"Tardis_Beginner_Tutorials/cheatsheet",title:"wikilink"}},[e._v("Tardis\ncommand-line\ncheatsheet")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"changing-your-shell"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#changing-your-shell"}},[e._v("#")]),e._v(" Changing your shell")]),e._v(" "),n("p",[e._v("If you decide you want to try another shell, you can type the name of\nit, e.g. "),n("strong",[e._v("zsh")]),e._v(" (Z Shell) to start it. However, to change it so that it\nis your login shell, the traditional "),n("strong",[e._v("chsh")]),e._v(" will not work. This is due\nto LDAP (the way that Tardis manages accounts). Please ask on our IRC\nchannel if you want to change it.")]),e._v(" "),n("p",[n("strong",[e._v("Next: "),n("a",{attrs:{href:"Tardis_Beginner_Tutorials/3",title:"wikilink"}},[e._v("Mail")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);